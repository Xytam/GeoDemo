CREATE STREAM CTA_RAW (VehicleID VARCHAR,Lat DOUBLE,Lon DOUBLE, Deviation BIGINT,DateTime VARCHAR,TripID VARCHAR,RouteID VARCHAR,DirectionNum BIGINT,DirectionText VARCHAR,TripHeadSign VARCHAR,TripStartTime VARCHAR,TripEndTime VARCHAR,BlockNumber VARCHAR) WITH (KAFKA_TOPIC='cta', VALUE_FORMAT='JSON', TIMESTAMP='DateTime',TIMESTAMP_FORMAT='yyyy-MM-dd''T''HH:mm:ss',PARTITIONS=1, REPLICAS=1);
CREATE STREAM CTA WITH (KAFKA_TOPIC='ctaPrepped') AS SELECT C.ROWTIME DTIME, 1 UNITY, geo_hash(lat,lon,6) geohash, *  FROM CTA_RAW C EMIT CHANGES;
CREATE STREAM FENCE_RAW (type VARCHAR, "properties" MAP<VARCHAR, VARCHAR>, geometry MAP<VARCHAR, VARCHAR>, _raw_data VARCHAR) WITH (kafka_topic='fence_raw', value_format='JSON', PARTITIONS=1,REPLICAS=1);
CREATE STREAM FENCE WITH (KAFKA_TOPIC='fence', PARTITIONS=1, REPLICAS=1) AS SELECT *, 1 "UNITY"  FROM FENCE_RAW;
CREATE TABLE geo_heat_map AS SELECT windowstart ws, windowend we, geohash, COUNT(*) total FROM  cta  WINDOW HOPPING (SIZE 60 SECONDS, ADVANCE BY 10 SECONDS) GROUP BY geohash EMIT CHANGES;
CREATE STREAM ALERT WITH (KAFKA_TOPIC='alert',PARTITIONS=1, REPLICAS=1) AS SELECT c.ROWTIME VEHICLETIME,f.ROWTIME FENCETIME, *  FROM CTA c LEFT JOIN FENCE f WITHIN 7 days ON c.UNITY = f.UNITY WHERE GEO_CONTAINED(c.LAT, c.LON, f._RAW_DATA) EMIT CHANGES;
